using ProtocolSharp.Types;
using ProtocolSharp.Utils;

namespace ProtocolSharp.Entities.Entities
{
	public class LivingEntity : Entity
	{
		public override void RegisterMetadata()
		{
			base.RegisterMetadata();
			MetaRegistry.Add(HandStates);
			MetaRegistry.Add(Health);
			MetaRegistry.Add(PotionEffectColor);
			MetaRegistry.Add(IsPotionEffectAmbient);
			MetaRegistry.Add(ArrowsStabbed);
			MetaRegistry.Add(HealthAddedByAbsorption);
			MetaRegistry.Add(SleepingLocation);
		}

		private byte _handState = 0;
		private const byte _isHandActive = 0x01;
		private const byte _activeHand = 0x02; // Unset for main, set for offhand
		private const byte _riptide = 0x04;

		public EntityMetaByte HandStates =>
			new EntityMetaByte
			{
				Index = 7,
				DefaultValue = 0,
				Value = _handState
			};

		public EntityMetaFloat Health =
			new EntityMetaFloat
			{
				Index = 8,
				DefaultValue = 1.0f
			};

		/// <summary>
		/// Set to 0 if there is no effect
		/// </summary>
		public EntityMetadata<VarInt> PotionEffectColor =
			new EntityMetadata<VarInt>
			{
				Index = 9,
				DefaultValue = 0
			};

		/// <summary>
		/// If true, reduces the number of particles generated by
		/// potions to 1/5 the normal amount
		/// </summary>
		public EntityMetaBool IsPotionEffectAmbient =
			new EntityMetaBool
			{
				Index = 10,
				DefaultValue = false
			};

		public EntityMetadata<VarInt> ArrowsStabbed =
			new EntityMetadata<VarInt>
			{
				Index = 11,
				DefaultValue = 0
			};

		public EntityMetadata<VarInt> HealthAddedByAbsorption =
			new EntityMetadata<VarInt>
			{
				Index = 12,
				DefaultValue = 0
			};

		public EntityMetadata<OptBlockPos> SleepingLocation =
			new EntityMetadata<OptBlockPos>
			{
				Index = 13,
				DefaultValue = new OptBlockPos(false)
			};

		public bool IsHandActive
		{
			get => FlagsHelper.IsSet(_handState, _isHandActive);
			set
			{
				if (value)
				{
					FlagsHelper.Set(ref _handState, _isHandActive);
				}
				else
				{
					FlagsHelper.Unset(ref _handState, _isHandActive);
				}
			}
		}

		public void SetMainHand()
		{
			FlagsHelper.Unset(ref _handState, _activeHand);
		}

		public void SetOffHand()
		{
			FlagsHelper.Set(ref _handState, _activeHand);
		}

		public bool IsInRiptide
		{
			get => FlagsHelper.IsSet(_handState, _riptide);
			set
			{
				if (value)
				{
					FlagsHelper.Set(ref _handState, _riptide);
				}
				else
				{
					FlagsHelper.Unset(ref _handState, _riptide);
				}
			}
		}
	}
}